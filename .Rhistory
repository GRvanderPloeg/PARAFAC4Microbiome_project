stability3$plot
stability4$plot
# So we choose 3 components
stability3$plot
stability4$plot
varExp
numComponents = 3
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Make the important loadings positive for easier interpretation
finalModel = resign(finalModel, mode="C", absorb="A")
finalModel = resign(finalModel, mode="B", absorb="A")
# Plot 2B
varExp = calculateVarExp(finalModel, processedFujita$data)
varExp
# Plot 2B
varExp = calculateVarExp(finalModel, processedFujita$data)
plotPARAFACmodel(finalModel, processedFujita, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = "")
# Plot 2B
varExp = calculateVarExp(finalModel, processedFujita$data)
plotPARAFACmodel(finalModel, processedFujita, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
browseVignettes()
library(parafac4microbiome)
library(tidyverse)
library(multiway)
set.seed(123)
I = dim(Shao2019$data)[1]
J = dim(Shao2019$data)[2]
K = dim(Shao2019$data)[3]
countMatrix = matrix(Shao2019$data, nrow=I)
newColNames = paste0(rep(Shao2019$mode2$ID,110), "_t", rep(1:K, each=J))
Shao2019$mode2
newColNames = paste0(rep(Shao2019$mode2$OTU,K), "_t", rep(1:K, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=1:I) %>% pivot_longer(-replicate) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=1:I) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-subject,-timepoint)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
rowSums(relAbs)
dim(relAbs)
I*K
J
totalSums
totalSums = rowSums(countMatrix.numeric, na.rm=TRUE)
totalSums
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
relAbs
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timpoient))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timpoint))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1)
Shao2019$mode1
I
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=Shao2019$mode1$Individual) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-subject,-timepoint)
countMatrix = matrix(Shao2019$data, nrow=I)
newColNames = paste0(rep(Shao2019$mode2$OTU,K), "_t", rep(1:K, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=Shao2019$mode1$Individual) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-subject,-timepoint)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="individual"))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual"))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU"))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% select(subject,timepoint,name,value,Delivery_mode,phylum)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>%
)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual"))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup()
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup()
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(Phylum))) + facet_wrap(vars(Delivery_mode)) + geom_bar(stat="identity")
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(phylum))) + facet_wrap(vars(Delivery_mode)) + geom_bar(stat="identity")
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(phylum))) + facet_wrap(vars(Delivery_mode),nrow=2,strip.position="right") + geom_bar(stat="identity") + xlab("Time point [days]") + ylab("Relative abundance")
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(phylum))) + facet_wrap(vars(Delivery_mode),nrow=2,strip.position="right") + geom_bar(stat="identity") + xlab("Time point [days]") + ylab("Relative abundance") + theme(legend.position="none")
processedShao = processDataCube(Shao2019, sparsityThreshold=0.99, centerMode=1, scaleMode=2)
numRepetitions = 50
assessment = assessNumComponents(processedShao$data, minNumComponents=1, maxNumComponents=5, numRepetitions=5, ctol=1e-6, maxit=200, numCores=1)
numRepetitions = 5
assessment = assessNumComponents(processedShao$data, minNumComponents=1, maxNumComponents=5, numRepetitions=5, ctol=1e-6, maxit=200, numCores=1)
processedShao = processDataCube(Shao2019, sparsityThreshold=0.9, considerGroups=TRUE, groupVariable="Delivery_mode", centerMode=1, scaleMode=2)
dim(processedShao$data)
numRepetitions = 5
assessment = assessNumComponents(processedShao$data, minNumComponents=1, maxNumComponents=5, numRepetitions=5, ctol=1e-6, maxit=200, numCores=1)
assessment$plots$overview
# 4 or 3 components seems okay
numFolds = 5
stability3 = modelStabilityCheck(processedShao, numComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
# Plot settings
colourCols = c("Delivery_mode", "phylum", "")
legendTitles = c("Delivery mode", "Phylum", "")
xLabels = c("Subject index", "Feature index", "Time index")
legendColNums = c(3,5,0)
arrangeModes = c(TRUE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
numFolds = 5
stability3 = modelStabilityCheck(processedShao, numComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability4 = modelStabilityCheck(processedShao, numComponents=4, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability3$plot
stability4$plot
# So we choose 3 components
numFolds = 5
stability2 = modelStabilityCheck(processedShao, numComponents=2, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability3 = modelStabilityCheck(processedShao, numComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability4 = modelStabilityCheck(processedShao, numComponents=4, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability2$plot
stability3$plot
stability4$plot
# So we choose 3 components
numComponents = 2
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Plot 2B
varExp = calculateVarExp(finalModel, processedShao$data)
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
varExp
# Correct time loadings
finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 2B
varExp = calculateVarExp(finalModel, processedShao$data)
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
numComponents = 3
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Correct time loadings
finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 2B
varExp = calculateVarExp(finalModel, processedShao$data)
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
numComponents = 3
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Correct time loadings
#finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 2B
varExp = calculateVarExp(finalModel, processedShao$data)
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
library(parafac4microbiome)
library(tidyverse)
library(multiway)
set.seed(123)
# Plot settings
colourCols = c("Delivery_mode", "phylum", "")
legendTitles = c("Delivery mode", "Phylum", "")
xLabels = c("Subject index", "Feature index", "Time index")
legendColNums = c(3,5,0)
arrangeModes = c(TRUE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
I = dim(Shao2019$data)[1]
J = dim(Shao2019$data)[2]
K = dim(Shao2019$data)[3]
countMatrix = matrix(Shao2019$data, nrow=I)
newColNames = paste0(rep(Shao2019$mode2$OTU,K), "_t", rep(1:K, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=Shao2019$mode1$Individual) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-subject,-timepoint)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
# Plot 3A
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(phylum))) + facet_wrap(vars(Delivery_mode),nrow=2,strip.position="right") + geom_bar(stat="identity") + xlab("Time point [days]") + ylab("Relative abundance") + theme(legend.position="none")
processedShao = processDataCube(Shao2019, sparsityThreshold=0.9, considerGroups=TRUE, groupVariable="Delivery_mode", centerMode=1, scaleMode=2)
numRepetitions = 5
assessment = assessNumComponents(processedShao$data, minNumComponents=1, maxNumComponents=5, numRepetitions=5, ctol=1e-6, maxit=200, numCores=1)
assessment$plots$overview
numFolds = 5
stability2 = modelStabilityCheck(processedShao, numComponents=2, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability3 = modelStabilityCheck(processedShao, numComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability4 = modelStabilityCheck(processedShao, numComponents=4, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability2$plot
stability3$plot
stability4$plot
# So we choose 3 components
numComponents = 3
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Correct time loadings
#finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 2B
varExp = calculateVarExp(finalModel, processedShao$data)
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
# Correct time loadings
finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 2B
varExp = calculateVarExp(finalModel, processedShao$data)
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
numComponents = 2
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Correct time loadings
finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 2B
varExp = calculateVarExp(finalModel, processedShao$data)
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
library(parafac4microbiome)
library(tidyverse)
library(multiway)
set.seed(123)
# Plot settings
colourCols = c("RFgroup", "Phylum", "")
legendTitles = c("RF group", "Phylum", "")
xLabels = c("Subject index", "Feature index", "Time index")
legendColNums = c(2,5,0)
arrangeModes = c(TRUE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
I = dim(vanderPloeg2024$data)[1]
J = dim(vanderPloeg2024$data)[2]
K = dim(vanderPloeg2024$data)[3]
countMatrix = matrix(vanderPloeg2024$data, nrow=I)
newColNames = paste0(rep(vanderPloeg2024$mode2$ASV,K), "_t", rep(1:K, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=vanderPloeg2024$mode1$subject) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
vanderPloeg2024$mode1
countMatrix
vanderPloeg2024$mode2
countMatrix = matrix(vanderPloeg2024$data, nrow=I)
newColNames = paste0(rep(vanderPloeg2024$mode2$asv,K), "_t", rep(1:K, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=vanderPloeg2024$mode1$subject) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-subject,-timepoint)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint))
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(vanderPloeg2024$mode1)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(vanderPloeg2024$mode1) %>% left_join(vanderPloeg2024$mode2, by=c("name"="asv")) %>% group_by(subject,timepoint,Phylum)
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(vanderPloeg2024$mode1) %>% left_join(vanderPloeg2024$mode2, by=c("name"="asv")) %>% group_by(subject,timepoint,Phylum) %>% summarize(s=sum(value)) %>% left_join(vanderPloeg2024$mode1) %>% ungroup() %>% group_by(RFgroup,Phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(Phylum))) + facet_wrap(vars(RFgroup),nrow=3,strip.position="right") + geom_bar(stat="identity") + xlab("Time point [days]") + ylab("Relative abundance") + theme(legend.position="none")
processedPloeg = processDataCube(vanderPloeg2024, sparsityThreshold=0.5, considerGroups=TRUE, groupVariable="RFgroup", centerMode=1, scaleMode=2)
numRepetitions = 5
assessment = assessNumComponents(processedPloeg$data, minNumComponents=1, maxNumComponents=5, numRepetitions=5, ctol=1e-6, maxit=200, numCores=1)
assessment$plots$overview
numFolds = 5
stability2 = modelStabilityCheck(processedPloeg, numComponents=2, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability3 = modelStabilityCheck(processedPloeg, numComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes)
stability2$plot
stability3$plot
# So we choose 2 components
numComponents = 2
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Correct time loadings
#finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 4B
varExp = calculateVarExp(finalModel, processedPloeg$data)
plotPARAFACmodel(finalModel, processedPloeg, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
# Correct time loadings
finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 4B
varExp = calculateVarExp(finalModel, processedPloeg$data)
plotPARAFACmodel(finalModel, processedPloeg, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
varExp
library(parafac4microbiome)
library(tidyverse)
library(multiway)
set.seed(123)
# Plot settings
colourCols = c("", "Genus", "")
legendTitles = c("", "Genus", "")
xLabels = c("Replicate", "Feature index", "Time point")
legendColNums = c(0,5,0)
arrangeModes = c(FALSE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
I = dim(Fujita2023$data)[1]
J = dim(Fujita2023$data)[2]
K = dim(Fujita2023$data)[3]
countMatrix = matrix(Fujita2023$data, nrow=I)
newColNames = paste0(rep(Fujita2023$mode2$ID,110), "_t", rep(1:110, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(replicate=1:8) %>% pivot_longer(-replicate) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-replicate,-timepoint)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
# Plot 2A
relAbs %>% mutate(replicate=countMatrix$replicate, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(replicate,timepoint)) %>% left_join(Fujita2023$mode2, by=c("name"="ID")) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(Genus))) + facet_wrap(vars(replicate),nrow=8,strip.position="right") + geom_bar(stat="identity",col="black") + theme(legend.position="None") + xlab("Time point") + ylab("Relative abundance")
library(parafac4microbiome)
library(tidyverse)
library(multiway)
set.seed(123)
# Plot settings
colourCols = c("", "Genus", "")
legendTitles = c("", "Genus", "")
xLabels = c("Replicate", "Feature index", "Time point")
legendColNums = c(0,5,0)
arrangeModes = c(FALSE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
I = dim(Fujita2023$data)[1]
J = dim(Fujita2023$data)[2]
K = dim(Fujita2023$data)[3]
countMatrix = matrix(Fujita2023$data, nrow=I)
newColNames = paste0(rep(Fujita2023$mode2$ID,110), "_t", rep(1:110, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(replicate=1:8) %>% pivot_longer(-replicate) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-replicate,-timepoint)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
# Plot 2A
relAbs %>% mutate(replicate=countMatrix$replicate, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(replicate,timepoint)) %>% left_join(Fujita2023$mode2, by=c("name"="ID")) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(Genus))) + facet_wrap(vars(replicate),nrow=8,strip.position="right") + geom_bar(stat="identity",col="black") + theme(legend.position="None") + xlab("Time point") + ylab("Relative abundance")
calculateSparsity(Fujita2023)
sparsity = calculateSparsity(Fujita2023)
sparsity %>% as_tibble9)
sparsity %>% as_tibble()
sparsity %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(bins=50)
sparsity = calculateSparsity(Fujita2023)
sparsity %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(bins=50)
sparsity = calculateSparsity(Fujita2023)
sparsity %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(bins=50)
processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2)
numRepetitions = 50
assessment = assessNumComponents(processedFujita$data, minNumComponents=1, maxNumComponents=5, numRepetitions=5, ctol=1e-6, maxit=200, numCores=12)
assessment$plots$overview
# 4 or 3 components seems okay
numFolds = 50
stability3 = modelStabilityCheck(processedFujita, numComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes,numCores=12)
stability4 = modelStabilityCheck(processedFujita, numComponents=4, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes,numCores=12)
stability3$plot
stability4$plot
# So we choose 3 components
numComponents = 3
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Make the important loadings positive for easier interpretation
finalModel = resign(finalModel, mode="C", absorb="A")
finalModel = resign(finalModel, mode="B", absorb="A")
# Plot 2B
varExp = calculateVarExp(finalModel, processedFujita$data)
plotPARAFACmodel(finalModel, processedFujita, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
library(parafac4microbiome)
library(tidyverse)
library(multiway)
set.seed(123)
# Plot settings
colourCols = c("Delivery_mode", "phylum", "")
legendTitles = c("Delivery mode", "Phylum", "")
xLabels = c("Subject index", "Feature index", "Time index")
legendColNums = c(3,5,0)
arrangeModes = c(TRUE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
I = dim(Shao2019$data)[1]
J = dim(Shao2019$data)[2]
K = dim(Shao2019$data)[3]
countMatrix = matrix(Shao2019$data, nrow=I)
newColNames = paste0(rep(Shao2019$mode2$OTU,K), "_t", rep(1:K, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=Shao2019$mode1$Individual) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-subject,-timepoint)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
# Plot 3A
relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(phylum))) + facet_wrap(vars(Delivery_mode),nrow=2,strip.position="right") + geom_bar(stat="identity") + xlab("Time point [days]") + ylab("Relative abundance") + theme(legend.position="none")
calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable="Delivery_mode")
sparsity = calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable="Delivery_mode")
sparsity[1,]
sparsity[1,] %>% as_tibble()
sparsity[1,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity = calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable="Delivery_mode")
sparsity[1,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity[2,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity = calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable="Delivery_mode")
sparsity[1,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity[2,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
t(sparsity)
t(sparsity) %>% as_tibble()
t(sparsity) %>% as_tibble() %>% ggplot(aes(x=V1,y=V2)) + geom_point()
sparsity = calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable="Delivery_mode")
sparsity[1,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity[2,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
t(sparsity) %>% as_tibble() %>% ggplot(aes(x=V1,y=V2)) + geom_point()
sparsity = calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable="Delivery_mode")
sparsity[1,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity[2,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
t(sparsity) %>% as_tibble() %>% ggplot(aes(x=V1,y=V2)) + geom_point()
processedShao = processDataCube(Shao2019, sparsityThreshold=0.9, considerGroups=TRUE, groupVariable="Delivery_mode", centerMode=1, scaleMode=2)
numRepetitions = 25
assessment = assessNumComponents(processedShao$data, minNumComponents=1, maxNumComponents=5, numRepetitions=5, ctol=1e-6, maxit=500, numCores=12)
assessment$plots$overview
numFolds = 25
stability2 = modelStabilityCheck(processedShao, numComponents=2, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes, numCores=12)
stability3 = modelStabilityCheck(processedShao, numComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes, numCores=12)
stability4 = modelStabilityCheck(processedShao, numComponents=4, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes, numCores=12)
stability2$plot
stability3$plot
stability4$plot
# So we choose 3 components
numComponents = 2
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Correct time loadings
finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 4B
varExp = calculateVarExp(finalModel, processedShao$data)
plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
library(parafac4microbiome)
library(tidyverse)
library(multiway)
set.seed(123)
sparsity = calculateSparsity(vanderPloeg2024, considerGroups = TRUE, groupVariable = "RFgroup")
sparsity = calculateSparsity(vanderPloeg2024, considerGroups = TRUE, groupVariable = "RFgroup")
sparsity[1,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity[2,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
sparsity[3,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram()
processedPloeg = processDataCube(vanderPloeg2024, sparsityThreshold=0.5, considerGroups=TRUE, groupVariable="RFgroup", centerMode=1, scaleMode=2)
numRepetitions = 25
assessment = assessNumComponents(processedPloeg$data, minNumComponents=1, maxNumComponents=5, numRepetitions=5, ctol=1e-6, maxit=500, numCores=12)
assessment$plots$overview
numFolds = 25
stability2 = modelStabilityCheck(processedPloeg, numComponents=2, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes, numCores=12)
# Plot settings
colourCols = c("RFgroup", "Phylum", "")
legendTitles = c("RF group", "Phylum", "")
xLabels = c("Subject index", "Feature index", "Time index")
legendColNums = c(2,5,0)
arrangeModes = c(TRUE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
numFolds = 25
stability2 = modelStabilityCheck(processedPloeg, numComponents=2, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes, numCores=12)
stability3 = modelStabilityCheck(processedPloeg, numComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, continuousModes=continuousModes, numCores=12)
stability2$plot
stability3$plot
# So we choose 2 components
numComponents = 2
modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents]))
finalModel = assessment$models[[numComponents]][[modelChoice]]
# Correct time loadings
finalModel = resign(finalModel, mode="C", absorb="B")
# Plot 4B
varExp = calculateVarExp(finalModel, processedPloeg$data)
plotPARAFACmodel(finalModel, processedPloeg, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
# Plot 4B
varExp = calculateVarExp(finalModel, processedPloeg$data)
plotPARAFACmodel(finalModel, processedPloeg, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
correctedA = correctPARAFACloadings(processedPloeg, finalModel, 1)
cbind(correctedA, processedPloeg$mode1)
cbind(correctedA, processedPloeg$mode1) %>% as_tibble()
cbind(correctedA, processedPloeg$mode1) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(RFgroup))) + geom_point()
plot(finalModel$A[,1], finalModel$A[,2])
cbind(correctedB, processedPloeg$mode2)
correctedB = correctPARAFACloadings(processedPloeg, finalModel, 2)
cbind(correctedB, processedPloeg$mode2)
cbind(correctedB, processedPloeg$mode2) %>% as_tibble()
cbind(correctedB, processedPloeg$mode2) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(Phylum))) + geom_point()
correctedA = correctPARAFACloadings(processedPloeg, finalModel, 1)
correctedB = correctPARAFACloadings(processedPloeg, finalModel, 2)
correctedC = correctPARAFACloadings(processedPloeg, finalModel, 3)
cbind(correctedA, processedPloeg$mode1) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(RFgroup))) + geom_point()
cbind(correctedB, processedPloeg$mode2) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(Phylum))) + geom_point()
cbind(correctedC, processedPloeg$mode3) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`)) + geom_point()
correctedA = correctPARAFACloadings(processedPloeg, finalModel, 1)
correctedB = correctPARAFACloadings(processedPloeg, finalModel, 2)
correctedC = correctPARAFACloadings(processedPloeg, finalModel, 3)
a=cbind(correctedA, processedPloeg$mode1) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(RFgroup))) + geom_point()
b=cbind(correctedB, processedPloeg$mode2) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(Phylum))) + geom_point()
c=cbind(correctedC, processedPloeg$mode3) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`)) + geom_point()
ggarrange(a,b,c, nrow=1)
library(ggpubr)
correctedA = correctPARAFACloadings(processedPloeg, finalModel, 1)
correctedB = correctPARAFACloadings(processedPloeg, finalModel, 2)
correctedC = correctPARAFACloadings(processedPloeg, finalModel, 3)
a=cbind(correctedA, processedPloeg$mode1) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(RFgroup))) + geom_point()
b=cbind(correctedB, processedPloeg$mode2) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(Phylum))) + geom_point()
c=cbind(correctedC, processedPloeg$mode3) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`)) + geom_point()
ggarrange(a,b,c, nrow=1)
correctedA = correctPARAFACloadings(processedPloeg, finalModel, 1)
correctedB = correctPARAFACloadings(processedPloeg, finalModel, 2)
correctedC = correctPARAFACloadings(processedPloeg, finalModel, 3)
a=cbind(correctedA, processedPloeg$mode1) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(RFgroup))) + geom_point() + theme(legend.position="none")
b=cbind(correctedB, processedPloeg$mode2) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(Phylum))) + geom_point() + theme(legend.position="none")
c=cbind(correctedC, processedPloeg$mode3) %>% as_tibble() %>% ggplot(aes(x=`1`,y=`2`)) + geom_point() + geom_path()
ggarrange(a,b,c, nrow=1)
