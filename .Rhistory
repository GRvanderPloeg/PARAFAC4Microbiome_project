}
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot()
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot()
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble()
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot()
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + scale_x_discrete(name="Processing type", labels=c("Pseudocount 1", "Pseudocount uniform", "Pseudocount 0.5", "Pseudocount 0.1"))
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + scale_x_discrete(name="Processing type", labels=c("Pseudocount 1", "Pseudocount uniform", "Pseudocount 0.5", "Pseudocount 0.1")) + stat_compare_means()
?stat_compare_means()
my_comparisons = list(c("varExp1", 'varExp2'), c("varExp1", "varExp3"), c("varExp1", "varExp4"))
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot()
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons)
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons, label="p.format")
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons, label="p.signif")
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons, label="p.signif") + scale_x_discrete(name="Pseudocount approach", labels=c("Pseudocount 1", "Pseudocount uniform", "Pseudocount 0.5", "Pseudocount 0.1"))
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons, label="p.signif") + scale_x_discrete(name="Pseudocount approach", labels=c("Pseudocount 1", "Pseudocount uniform", "Pseudocount 0.5", "Pseudocount 0.1")) + ylab("Variation explained (%)")
# Create fake input dataset with NA instead of zeroes to compare
Xna = newX_cnt_scl
Xna[vanderPloeg2024$data == 0] = NA
# Recalculate varExp
varExp1 = 1:50
varExp2 = 1:50
varExp3 = 1:50
varExp4 = 1:50
for(i in 1:50){
varExp1[i] = calculateVarExp(qualityAssessment$models[[2]][[i]]$Fac, Xna) * 100
varExp2[i] = calculateVarExp(qualityAssessment2$models[[2]][[i]]$Fac, Xna) * 100
varExp3[i] = calculateVarExp(qualityAssessment3$models[[2]][[i]]$Fac, Xna) * 100
varExp4[i] = calculateVarExp(qualityAssessment4$models[[2]][[i]]$Fac, Xna) * 100
}
my_comparisons = list(c("varExp1", 'varExp2'), c("varExp1", "varExp3"), c("varExp1", "varExp4"))
cbind(varExp1, varExp2, varExp3, varExp4) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons, label="p.signif") + scale_x_discrete(name="Pseudocount approach", labels=c("Pseudocount 1", "Pseudocount uniform", "Pseudocount 0.5", "Pseudocount 0.1")) + ylab("Variation explained (%)")
cbind(varExp1, varExp3, varExp4, varExp2) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons, label="p.signif") + scale_x_discrete(name="Pseudocount approach", labels=c("Pseudocount 1", "Pseudocount 0.5", "Pseudocount 0.1", "Pseudocount uniform")) + ylab("Variation explained (%)")
cbind(varExp1, varExp3, varExp4, varExp2) %>% as_tibble() %>% pivot_longer(everything()) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot()
# Create fake input dataset with NA instead of zeroes to compare
Xna = newX_cnt_scl
Xna[vanderPloeg2024$data == 0] = NA
# Recalculate varExp
varExp1 = 1:50
varExp2 = 1:50
varExp3 = 1:50
varExp4 = 1:50
for(i in 1:50){
varExp1[i] = calculateVarExp(qualityAssessment$models[[2]][[i]]$Fac, Xna) * 100
varExp2[i] = calculateVarExp(qualityAssessment2$models[[2]][[i]]$Fac, Xna) * 100
varExp3[i] = calculateVarExp(qualityAssessment3$models[[2]][[i]]$Fac, Xna) * 100
varExp4[i] = calculateVarExp(qualityAssessment4$models[[2]][[i]]$Fac, Xna) * 100
}
my_comparisons = list(c("varExp1", 'varExp2'), c("varExp1", "varExp3"), c("varExp1", "varExp4"))
df = cbind(varExp1, varExp3, varExp4, varExp2) %>% as_tibble() %>% pivot_longer(everything()) %>% mutate(name = as.factor(name, levels="varExp1", "varExp3", "varExp4", "varExp2"))
df = cbind(varExp1, varExp3, varExp4, varExp2) %>% as_tibble() %>% pivot_longer(everything()) %>% mutate(name = factor(name, levels="varExp1", "varExp3", "varExp4", "varExp2"))
cbind(varExp1, varExp3, varExp4, varExp2) %>% as_tibble() %>% pivot_longer(everything())
df = cbind(varExp1, varExp3, varExp4, varExp2) %>% as_tibble() %>% pivot_longer(everything()) %>% mutate(name = factor(name, levels=c("varExp1", "varExp3", "varExp4", "varExp2")))
df %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons, label="p.signif") + scale_x_discrete(name="Pseudocount approach", labels=c("Pseudocount 1", "Pseudocount 0.5", "Pseudocount 0.1", "Pseudocount uniform")) + ylab("Variation explained (%)")
df %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + stat_compare_means(comparisons=my_comparisons, label="p.signif") + scale_x_discrete(name="Pseudocount approach", labels=c("Pseudocount 1", "Pseudocount 0.5", "Pseudocount 0.1", "Pseudocount uniform (0,1)")) + ylab("Variation explained (%)")
library(parafac4microbiome)
library(tidyverse)
library(multiway)
library(ggpubr)
set.seed(123)
# Plot settings
colourCols = c("", "Genus", "")
legendTitles = c("", "Genus", "")
xLabels = c("Replicate", "Feature index", "Time point")
legendColNums = c(0,5,0)
arrangeModes = c(FALSE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
sparsity = calculateSparsity(Fujita2023) * 100
sparsity %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(bins=100, col="black") + xlab("Sparsity (%)") + ylab("Count") + geom_vline(xintercept=99, colour="red", linewidth=1)
processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2)
numRepetitions = 50
qualityAssessment = assessModelQuality(processedFujita$data, minNumComponents=1, maxNumComponents=5, numRepetitions=numRepetitions, ctol=1e-6, maxit=500, numCores=12)
qualityAssessment$metrics$varExp
qualityAssessment$metrics$varExp[,3]
qualityAssessment$metrics$varExp[,3] %>% mean
qualityAssessment$metrics$varExp[,4] %>% mean
library(parafac4microbiome)
library(tidyverse)
library(multiway)
library(ggpubr)
set.seed(123)
# Plot settings
colourCols = c("", "Genus", "")
legendTitles = c("", "Genus", "")
xLabels = c("Replicate", "Feature index", "Time point")
legendColNums = c(0,5,0)
arrangeModes = c(FALSE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
sparsity = calculateSparsity(Fujita2023) * 100
sparsity %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(bins=100, col="black") + xlab("Sparsity (%)") + ylab("Count") + geom_vline(xintercept=99, colour="red", linewidth=1)
processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2)
numRepetitions = 50
qualityAssessment = assessModelQuality(processedFujita$data, minNumComponents=1, maxNumComponents=5, numRepetitions=numRepetitions, ctol=1e-6, maxit=500, numCores=12)
qualityAssessment$plots$overview
# 4 or 3 components seems okay
numFolds = 8
stabilityAssessment = assessModelStability(processedFujita, minNumComponents=1, maxNumComponents=5, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes,numCores=12)
stabilityAssessment$modelPlots[[1]]
stabilityAssessment$modelPlots[[2]]
stabilityAssessment$modelPlots[[3]]
stabilityAssessment$modelPlots[[4]]
stabilityAssessment$modelPlots[[5]]
numComponents = 3
modelChoice = which(qualityAssessment$metrics$varExp[,numComponents] == max(qualityAssessment$metrics$varExp[,numComponents]))
finalModel = qualityAssessment$models[[numComponents]][[modelChoice]]
# Plot 2B
varExp = calculateVarExp(finalModel$Fac, processedFujita$data)
plotlist = plotPARAFACmodel(finalModel$Fac, processedFujita, 3, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = "")
newPlotlist = list()
for(i in 1:9){
newPlotlist[[i]] = plotlist[[i]] + theme(text=element_text(size=14))
}
ggarrange(plotlist=newPlotlist, ncol=3, nrow=3)
# Flip modes
Fac = finalModel$Fac
Fac[[2]][,1] = -1 * Fac[[2]][,1]
Fac[[3]][,1] = -1 * Fac[[3]][,1]
Fac[[1]][,2] = -1 * Fac[[1]][,2]
Fac[[2]][,2] = -1 * Fac[[2]][,2]
Fac[[1]][,3] = -1 * Fac[[1]][,3]
Fac[[3]][,3] = -1 * Fac[[3]][,3]
plotPARAFACmodel(Fac, processedFujita, 3, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
I = dim(Fujita2023$data)[1]
J = dim(Fujita2023$data)[2]
K = dim(Fujita2023$data)[3]
countMatrix = matrix(Fujita2023$data, nrow=I)
newColNames = paste0(rep(Fujita2023$mode2$ID,110), "_t", rep(1:110, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(replicate=1:8) %>% pivot_longer(-replicate) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(-replicate,-timepoint)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
# Plot 2A
relAbs %>% mutate(replicate=countMatrix$replicate, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(replicate,timepoint)) %>% filter(name %in% processedFujita$mode2$ID) %>% left_join(Fujita2023$mode2, by=c("name"="ID")) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(Genus))) + facet_wrap(vars(replicate),nrow=8,strip.position="right") + geom_bar(stat="identity",col="black") + theme(legend.position="None", axis.text.x = element_text(angle=90, vjust=0.5,hjust=1)) + xlab("Time point") + ylab("Relative abundance")
relAbs %>% mutate(replicate=countMatrix$replicate, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(replicate,timepoint)) %>% filter(name %in% processedFujita$mode2$ID) %>% left_join(Fujita2023$mode2, by=c("name"="ID")) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(Genus))) + facet_wrap(vars(replicate),nrow=8,strip.position="right") + geom_bar(stat="identity",col="black") + theme(axis.text.x = element_text(angle=90, vjust=0.5,hjust=1)) + xlab("Time point") + ylab("Relative abundance")
library(vegan)
library(ape)
library(ggbiplot)
library(rTensor)
library(scales)
unfoldedCounts = k_unfold(as.tensor(Fujita2023$data), 2)@data %>% t()
replicates = rep(1:8, 110)
timepoints = rep(1:110, each=8)
plotlist = list()
pseudocount = 1
counts_clr = t(apply(unfoldedCounts+pseudocount, 1, function(x){log(x / compositions::geometricmean(x))}))
colnames(counts_clr) = Fujita2023$mode2$Genus
counts_meta = cbind(counts_clr, replicates, timepoints) %>% as.data.frame()
counts_meta$r = as.factor(counts_meta$r)
pca_model = prcomp(counts_clr, center=TRUE, scale=TRUE)
plotlist[[1]] = autoplot(pca_model, data=counts_meta, colour="r", loadings=TRUE, loadings.label=TRUE, loadings.label.size=3) + ggtitle("All")
library(parafac4microbiome)
library(tidyverse)
library(multiway)
library(ggpubr)
set.seed(123)
# Plot settings
colourCols = c("Delivery_mode", "phylum", "")
legendTitles = c("Delivery mode", "Phylum", "")
xLabels = c("Subject index", "Feature index", "Time index")
legendColNums = c(3,5,0)
arrangeModes = c(TRUE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
sparsity = calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable="Delivery_mode") * 100
a=sparsity[1,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(col="black",bins=50) + xlab("Sparsity (%)") + ylab("Count") + ggtitle("C-section born") + geom_vline(xintercept=90, col="red", linewidth=1)
b=sparsity[2,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(col="black",bins=50) + xlab("Sparsity (%)") + ylab("Count") + ggtitle("Vaginally born") + geom_vline(xintercept=90, col="red", linewidth=1)
ggarrange(a,b)
processedShao = processDataCube(Shao2019, sparsityThreshold=0.9, considerGroups=TRUE, groupVariable="Delivery_mode", centerMode=1, scaleMode=2)
numRepetitions = 50
qualityAssessment = assessModelQuality(processedShao$data, minNumComponents=1, maxNumComponents=5, numRepetitions=numRepetitions, ctol=1e-8, maxit=500, numCores=12)
qualityAssessment$plots$overview
numFolds = 50
stabilityAssessment = assessModelStability(processedShao, minNumComponents=1, maxNumComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=4)
stabilityAssessment$modelPlots[[1]]
stabilityAssessment$modelPlots[[2]]
stabilityAssessment$modelPlots[[3]]
numComponents = 3
modelChoice = which(qualityAssessment$metrics$varExp[,numComponents] == max(qualityAssessment$metrics$varExp[,numComponents]))
finalModel = qualityAssessment$models[[numComponents]][[modelChoice]]
# Plot 3B - make by hand to deal with colour feedback
# Set up colours
colours = RColorBrewer:: brewer.pal(8, "Dark2")
bm_cols = colours[1:2]
phylum_cols = colours[-c(1:2)]
# Flip Fac where needed
Fac = finalModel$Fac
Fac[[3]][,2] = -1 * Fac[[3]][,2]
Fac[[1]][,2] = -1 * Fac[[1]][,2]
Fac[[3]][,3] = -1 * Fac[[3]][,3]
Fac[[1]][,3] = -1 * Fac[[1]][,3]
days = c("4", "7", "21", "Infancy")
a = cbind(Fac[[1]], processedShao$mode1) %>% as_tibble() %>% arrange(Delivery_mode, Individual) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(Delivery_mode))) + geom_bar(stat="identity") + scale_fill_manual(name="Birth mode", values=bm_cols, labels=c("Caesarean", "Vaginal")) + xlab("") + ylab("Component 1") + theme(legend.position="none",text=element_text(size=12))
b = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(phylum, class, order, family, genus, mOTU, OTU) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + xlab("") + ylab("") + theme(legend.position="none", text=element_text(size=12))
c = Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line() + geom_point() + xlab("") + ylab("") + scale_x_discrete(name="",limits=days)
d = cbind(Fac[[1]], processedShao$mode1) %>% as_tibble() %>% arrange(Delivery_mode, Individual) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(Delivery_mode))) + geom_bar(stat="identity") + scale_fill_manual(name="Birth mode", values=bm_cols, labels=c("Caesarean", "Vaginal")) + xlab("") + ylab("Component 2") + theme(legend.position="none",text=element_text(size=12))
e = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(phylum, class, order, family, genus, mOTU, OTU) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + xlab("") + ylab("") + theme(legend.position="none", text=element_text(size=12))
f = Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line() + geom_point() + xlab("") + ylab("") + scale_x_discrete(name="",limits=days)
g = cbind(Fac[[1]], processedShao$mode1) %>% as_tibble() %>% arrange(Delivery_mode, Individual) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`3`,fill=as.factor(Delivery_mode))) + geom_bar(stat="identity") + scale_fill_manual(name="Birth mode", values=bm_cols, labels=c("Caesarean", "Vaginal")) + xlab("Subject index") + ylab("Component 3") + theme(legend.position="none",text=element_text(size=12))
h = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(phylum, class, order, family, genus, mOTU, OTU) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`3`,fill=as.factor(phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + xlab("Feature index") + ylab("") + theme(legend.position="none", text=element_text(size=12))
i = Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V3)) + geom_line() + geom_point() + xlab("") + ylab("") + scale_x_discrete(name="Time point [days]",limits=days)
ggarrange(a,b,c,d,e,f,g,h,i)
temp1 = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(`1`) %>% mutate(index=1:nrow(.)) %>% filter(abs(`1`) > 0.01)
name = str_split_fixed(temp1$mOTU, " \\[", 2)[,1]
name = str_split_fixed(name, " ", 3)[,2:3] %>% as_tibble()
name[name$V1 == "","V1"] = "Unclassified"
name = paste0(name$V1, " ", name$V2)
a = temp1 %>% ggplot(aes(x=`1`,y=as.factor(index),fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("Microbiota") + xlab("Component 1") + scale_y_discrete(labels=name) + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + ylab("") + theme(legend.position="none", text=element_text(size=12))
temp2 = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(`2`) %>% mutate(index=1:nrow(.)) %>% filter(abs(`2`) > 0.01)
name = str_split_fixed(temp2$mOTU, " \\[", 2)[,1]
name = str_split_fixed(name, " ", 3)[,2:3] %>% as_tibble()
name[name$V1 == "","V1"] = "Unclassified"
name = paste0(name$V1, " ", name$V2)
b = temp2 %>% ggplot(aes(x=`2`,y=as.factor(index),fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("Microbiota") + xlab("Component 2") + scale_y_discrete(labels=name) + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified"))+ ylab("") + theme(legend.position="none", text=element_text(size=12))
temp3 = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(`3`) %>% mutate(index=1:nrow(.)) %>% filter(abs(`3`) > 0.01)
name = str_split_fixed(temp3$mOTU, " \\[", 2)[,1]
name = str_split_fixed(name, " ", 3)[,2:3] %>% as_tibble()
name[name$V1 == "","V1"] = "Unclassified"
name = paste0(name$V1, " ", name$V2)
c = temp3 %>% ggplot(aes(x=`3`,y=as.factor(index),fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("Microbiota") + xlab("Component 3") + scale_y_discrete(labels=name) + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + ylab("") + theme(legend.position="none", text=element_text(size=12))
ggarrange(a,b,c, nrow=1)
I = dim(Shao2019$data)[1]
J = dim(Shao2019$data)[2]
K = dim(Shao2019$data)[3]
timepoints = c("4", "7", "21", "Infancy")
countMatrix = matrix(Shao2019$data, nrow=I)
newColNames = paste0(rep(Shao2019$mode2$OTU,K), "_t", rep(1:K, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=Shao2019$mode1$Individual) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(processedShao$mode2$OTU)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
# Plot 3A
relAbs %>% mutate(subject=countMatrix$subject, timepoint=timepoints[countMatrix$timepoint]) %>% pivot_longer(-c(subject,timepoint)) %>% filter(name %in% processedShao$mode2$OTU) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% mutate(timepoint = factor(timepoint, levels=c("4","7","21","Infancy"))) %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(phylum))) + facet_wrap(vars(Delivery_mode),nrow=2,strip.position="right") + geom_bar(stat="identity") + xlab("Time point [days]") + ylab("Relative abundance") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + theme(legend.position="none", text=element_text(size=14))
numFolds = 50
stabilityAssessment = assessModelStability(processedShao, minNumComponents=1, maxNumComponents=3, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=4)
stabilityAssessment$modelPlots[[1]]
stabilityAssessment$modelPlots[[2]]
stabilityAssessment$modelPlots[[3]]
numComponents = 3
modelChoice = which(qualityAssessment$metrics$varExp[,numComponents] == max(qualityAssessment$metrics$varExp[,numComponents]))
finalModel = qualityAssessment$models[[numComponents]][[modelChoice]]
# Plot 3B - make by hand to deal with colour feedback
# Set up colours
colours = RColorBrewer:: brewer.pal(8, "Dark2")
bm_cols = colours[1:2]
phylum_cols = colours[-c(1:2)]
# Flip Fac where needed
Fac = finalModel$Fac
Fac[[3]][,2] = -1 * Fac[[3]][,2]
Fac[[1]][,2] = -1 * Fac[[1]][,2]
Fac[[3]][,3] = -1 * Fac[[3]][,3]
Fac[[1]][,3] = -1 * Fac[[1]][,3]
days = c("4", "7", "21", "Infancy")
a = cbind(Fac[[1]], processedShao$mode1) %>% as_tibble() %>% arrange(Delivery_mode, Individual) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(Delivery_mode))) + geom_bar(stat="identity") + scale_fill_manual(name="Birth mode", values=bm_cols, labels=c("Caesarean", "Vaginal")) + xlab("") + ylab("Component 1") + theme(legend.position="none",text=element_text(size=12))
b = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(phylum, class, order, family, genus, mOTU, OTU) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + xlab("") + ylab("") + theme(legend.position="none", text=element_text(size=12))
c = Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line() + geom_point() + xlab("") + ylab("") + scale_x_discrete(name="",limits=days)
d = cbind(Fac[[1]], processedShao$mode1) %>% as_tibble() %>% arrange(Delivery_mode, Individual) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(Delivery_mode))) + geom_bar(stat="identity") + scale_fill_manual(name="Birth mode", values=bm_cols, labels=c("Caesarean", "Vaginal")) + xlab("") + ylab("Component 2") + theme(legend.position="none",text=element_text(size=12))
e = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(phylum, class, order, family, genus, mOTU, OTU) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + xlab("") + ylab("") + theme(legend.position="none", text=element_text(size=12))
f = Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line() + geom_point() + xlab("") + ylab("") + scale_x_discrete(name="",limits=days)
g = cbind(Fac[[1]], processedShao$mode1) %>% as_tibble() %>% arrange(Delivery_mode, Individual) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`3`,fill=as.factor(Delivery_mode))) + geom_bar(stat="identity") + scale_fill_manual(name="Birth mode", values=bm_cols, labels=c("Caesarean", "Vaginal")) + xlab("Subject index") + ylab("Component 3") + theme(legend.position="none",text=element_text(size=12))
h = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(phylum, class, order, family, genus, mOTU, OTU) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`3`,fill=as.factor(phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + xlab("Feature index") + ylab("") + theme(legend.position="none", text=element_text(size=12))
i = Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V3)) + geom_line() + geom_point() + xlab("") + ylab("") + scale_x_discrete(name="Time point [days]",limits=days)
ggarrange(a,b,c,d,e,f,g,h,i)
temp1 = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(`1`) %>% mutate(index=1:nrow(.)) %>% filter(abs(`1`) > 0.01)
name = str_split_fixed(temp1$mOTU, " \\[", 2)[,1]
name = str_split_fixed(name, " ", 3)[,2:3] %>% as_tibble()
name[name$V1 == "","V1"] = "Unclassified"
name = paste0(name$V1, " ", name$V2)
a = temp1 %>% ggplot(aes(x=`1`,y=as.factor(index),fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("Microbiota") + xlab("Component 1") + scale_y_discrete(labels=name) + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + ylab("") + theme(legend.position="none", text=element_text(size=12))
temp2 = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(`2`) %>% mutate(index=1:nrow(.)) %>% filter(abs(`2`) > 0.01)
name = str_split_fixed(temp2$mOTU, " \\[", 2)[,1]
name = str_split_fixed(name, " ", 3)[,2:3] %>% as_tibble()
name[name$V1 == "","V1"] = "Unclassified"
name = paste0(name$V1, " ", name$V2)
b = temp2 %>% ggplot(aes(x=`2`,y=as.factor(index),fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("Microbiota") + xlab("Component 2") + scale_y_discrete(labels=name) + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified"))+ ylab("") + theme(legend.position="none", text=element_text(size=12))
temp3 = cbind(Fac[[2]], processedShao$mode2) %>% as_tibble() %>% arrange(`3`) %>% mutate(index=1:nrow(.)) %>% filter(abs(`3`) > 0.01)
name = str_split_fixed(temp3$mOTU, " \\[", 2)[,1]
name = str_split_fixed(name, " ", 3)[,2:3] %>% as_tibble()
name[name$V1 == "","V1"] = "Unclassified"
name = paste0(name$V1, " ", name$V2)
c = temp3 %>% ggplot(aes(x=`3`,y=as.factor(index),fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("Microbiota") + xlab("Component 3") + scale_y_discrete(labels=name) + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + ylab("") + theme(legend.position="none", text=element_text(size=12))
ggarrange(a,b,c, nrow=1)
I = dim(Shao2019$data)[1]
J = dim(Shao2019$data)[2]
K = dim(Shao2019$data)[3]
timepoints = c("4", "7", "21", "Infancy")
countMatrix = matrix(Shao2019$data, nrow=I)
newColNames = paste0(rep(Shao2019$mode2$OTU,K), "_t", rep(1:K, each=J))
colnames(countMatrix) = newColNames
countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=Shao2019$mode1$Individual) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
countMatrix.numeric = countMatrix %>% select(processedShao$mode2$OTU)
totalSums = rowSums(countMatrix.numeric)
relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
# Plot 3A
relAbs %>% mutate(subject=countMatrix$subject, timepoint=timepoints[countMatrix$timepoint]) %>% pivot_longer(-c(subject,timepoint)) %>% filter(name %in% processedShao$mode2$OTU) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% left_join(Shao2019$mode2, by=c("name"="OTU")) %>% group_by(subject,timepoint,phylum) %>% summarize(s=sum(value)) %>% left_join(Shao2019$mode1, by=c("subject"="Individual")) %>% ungroup() %>% group_by(Delivery_mode,phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% mutate(timepoint = factor(timepoint, levels=c("4","7","21","Infancy"))) %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(phylum))) + facet_wrap(vars(Delivery_mode),nrow=2,strip.position="right") + geom_bar(stat="identity") + xlab("Time point [days]") + ylab("Relative abundance") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteria", "Bacteroidetes", "Firmicutes", "Proteobacteria", "Unclassified")) + theme(legend.position="none", text=element_text(size=14))
Shao2019$mode1
sampleMeta = read.csv("./Data/Shao_sampleMetadata.csv", skip=2) %>% as_tibble()
subjectLoadings = cbind(Fac[[1]], processedShao$mode1) %>% as_tibble() %>% left_join(sampleMeta) %>% select(-Time_point,-Accession,-WGS_reads_raw,-WGS_reads_trimmed) %>% filter(Infancy_sampling_age_months != "Mother") %>% unique()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(Individual = rep(processedShao$mode1$Individual, each=4), Time_point = rep(c(4,7,21,"Infancy"),1580/4)) %>% left_join(sampleMeta)
uncorrectedP = matrix(0L, nrow=3, ncol=7)
# Delivery mode
uncorrectedP[1,1] = wilcox.test(subjectLoadings %>% filter(Delivery_mode == "Caesarean") %>% select(`1`) %>% pull(),
subjectLoadings %>% filter(Delivery_mode == "Vaginal") %>% select(`1`) %>% pull())$p.value
uncorrectedP[2,1] = wilcox.test(subjectLoadings %>% filter(Delivery_mode == "Caesarean") %>% select(`2`) %>% pull(),
subjectLoadings %>% filter(Delivery_mode == "Vaginal") %>% select(`2`) %>% pull())$p.value
uncorrectedP[3,1] = wilcox.test(subjectLoadings %>% filter(Delivery_mode == "Caesarean") %>% select(`3`) %>% pull(),
subjectLoadings %>% filter(Delivery_mode == "Vaginal") %>% select(`3`) %>% pull())$p.value
# Feeding method
uncorrectedP[1,2] = wilcox.test(subjectLoadings %>% filter(Feeding_method == "BF") %>% select(`1`) %>% pull(),
subjectLoadings %>% filter(Feeding_method == "NoBF") %>% select(`1`) %>% pull())$p.value
uncorrectedP[2,2] = wilcox.test(subjectLoadings %>% filter(Feeding_method == "BF") %>% select(`2`) %>% pull(),
subjectLoadings %>% filter(Feeding_method == "NoBF") %>% select(`2`) %>% pull())$p.value
uncorrectedP[3,2] = wilcox.test(subjectLoadings %>% filter(Feeding_method == "BF") %>% select(`3`) %>% pull(),
subjectLoadings %>% filter(Feeding_method == "NoBF") %>% select(`3`) %>% pull())$p.value
# Gender
uncorrectedP[1,3] = wilcox.test(subjectLoadings %>% filter(Gender == "Male") %>% select(`1`) %>% pull(),
subjectLoadings %>% filter(Gender == "Female") %>% select(`1`) %>% pull())$p.value
uncorrectedP[2,3] = wilcox.test(subjectLoadings %>% filter(Gender == "Male") %>% select(`2`) %>% pull(),
subjectLoadings %>% filter(Gender == "Female") %>% select(`2`) %>% pull())$p.value
uncorrectedP[3,3] = wilcox.test(subjectLoadings %>% filter(Gender == "Male") %>% select(`3`) %>% pull(),
subjectLoadings %>% filter(Gender == "Female") %>% select(`3`) %>% pull())$p.value
# Abx mother during labour
uncorrectedP[1,4] = wilcox.test(subjectLoadings %>% filter(Abx_mother_labour_IAP == "Yes") %>% select(`1`) %>% pull(),
subjectLoadings %>% filter(Abx_mother_labour_IAP != "Yes") %>% select(`1`) %>% pull())$p.value
uncorrectedP[2,4] = wilcox.test(subjectLoadings %>% filter(Abx_mother_labour_IAP == "Yes") %>% select(`2`) %>% pull(),
subjectLoadings %>% filter(Abx_mother_labour_IAP != "Yes") %>% select(`2`) %>% pull())$p.value
uncorrectedP[3,4] = wilcox.test(subjectLoadings %>% filter(Abx_mother_labour_IAP == "Yes") %>% select(`3`) %>% pull(),
subjectLoadings %>% filter(Abx_mother_labour_IAP != "Yes") %>% select(`3`) %>% pull())$p.value
# Abx baby in hospital
uncorrectedP[1,5] = wilcox.test(subjectLoadings %>% filter(Abx_Baby_in_hospital  == "Yes") %>% select(`1`) %>% pull(),
subjectLoadings %>% filter(Abx_Baby_in_hospital  != "Yes") %>% select(`1`) %>% pull())$p.value
uncorrectedP[2,5] = wilcox.test(subjectLoadings %>% filter(Abx_Baby_in_hospital  == "Yes") %>% select(`2`) %>% pull(),
subjectLoadings %>% filter(Abx_Baby_in_hospital  != "Yes") %>% select(`2`) %>% pull())$p.value
uncorrectedP[3,5] = wilcox.test(subjectLoadings %>% filter(Abx_Baby_in_hospital  == "Yes") %>% select(`3`) %>% pull(),
subjectLoadings %>% filter(Abx_Baby_in_hospital  != "Yes") %>% select(`3`) %>% pull())$p.value
# Abx baby after hospital
uncorrectedP[1,6] = wilcox.test(subjectLoadings %>% filter(Abx_Baby_after_hospital  == "Yes") %>% select(`1`) %>% pull(),
subjectLoadings %>% filter(Abx_Baby_after_hospital  == "No") %>% select(`1`) %>% pull())$p.value
uncorrectedP[2,6] = wilcox.test(subjectLoadings %>% filter(Abx_Baby_after_hospital  == "Yes") %>% select(`2`) %>% pull(),
subjectLoadings %>% filter(Abx_Baby_after_hospital  == "No") %>% select(`2`) %>% pull())$p.value
uncorrectedP[3,6] = wilcox.test(subjectLoadings %>% filter(Abx_Baby_after_hospital  == "Yes") %>% select(`3`) %>% pull(),
subjectLoadings %>% filter(Abx_Baby_after_hospital  == "No") %>% select(`3`) %>% pull())$p.value
# Bacteroides profile
uncorrectedP[1,7] = wilcox.test(subjectLoadings %>% filter(Bacteroides_profile  == "low_Bacteroides") %>% select(`1`) %>% pull(),
subjectLoadings %>% filter(Bacteroides_profile  == "normal_Bacteroides") %>% select(`1`) %>% pull())$p.value
uncorrectedP[2,7] = wilcox.test(subjectLoadings %>% filter(Bacteroides_profile  == "low_Bacteroides") %>% select(`2`) %>% pull(),
subjectLoadings %>% filter(Bacteroides_profile  == "normal_Bacteroides") %>% select(`2`) %>% pull())$p.value
uncorrectedP[3,7] = wilcox.test(subjectLoadings %>% filter(Bacteroides_profile  == "low_Bacteroides") %>% select(`3`) %>% pull(),
subjectLoadings %>% filter(Bacteroides_profile  == "normal_Bacteroides") %>% select(`3`) %>% pull())$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=3, ncol=7)
correctedP
library(parafac4microbiome)
library(tidyverse)
library(multiway)
library(ggpubr)
library(cluster)
library(factoextra)
library(ggrepel)
library(scales)
set.seed(123)
# Plot settings
colourCols = c("RFgroup", "Phylum", "")
legendTitles = c("RF group", "Phylum", "")
xLabels = c("Subject index", "Feature index", "Time index")
legendColNums = c(3,5,0)
arrangeModes = c(TRUE, TRUE, FALSE)
continuousModes = c(FALSE,FALSE,TRUE)
sparsity = calculateSparsity(vanderPloeg2024$upper_jaw_lingual, considerGroups = TRUE, groupVariable = "RFgroup") * 100
a=sparsity[1,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(col="black", bins=25) + geom_vline(xintercept=50, col="red", linewidth=1) + xlab("Sparsity (%)") + ylab("Count") + ggtitle("Low responders")
b=sparsity[2,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(col="black", bins=25) + geom_vline(xintercept=50, col="red", linewidth=1) +xlab("Sparsity (%)") + ylab("Count") + ggtitle("Mid responders")
c=sparsity[3,] %>% as_tibble() %>% ggplot(aes(x=value)) + geom_histogram(col="black", bins=25) + geom_vline(xintercept=50, col="red", linewidth=1) +xlab("Sparsity (%)") + ylab("Count") + ggtitle("High responders")
ggarrange(a,b,c, nrow=1)
processedPloeg = processDataCube(vanderPloeg2024$upper_jaw_lingual, sparsityThreshold=0.5, considerGroups=TRUE, groupVariable="RFgroup", centerMode=1, scaleMode=2)
numRepetitions = 50
qualityAssessment = assessModelQuality(processedPloeg$data, minNumComponents=1, maxNumComponents=5, numRepetitions=numRepetitions, ctol=1e-6, maxit=500, numCores=12)
qualityAssessment$plots$overview
qualityAssessment$plots$TCC[[3]]
numFolds = 50
stabilityAssessment = assessModelStability(processedPloeg, minNumComponents=1, maxNumComponents=5, numFolds=numFolds, colourCols=colourCols, legendTitles=legendTitles, xLabels=xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=12)
stabilityAssessment$modelPlots[[1]]
stabilityAssessment$modelPlots[[2]]
stabilityAssessment$modelPlots[[3]]
stabilityAssessment$modelPlots[[4]]
stabilityAssessment$modelPlots[[5]]
numComponents = 2
modelChoice = which(qualityAssessment$metrics$varExp[,numComponents] == max(qualityAssessment$metrics$varExp[,numComponents]))
finalModel = qualityAssessment$models[[numComponents]][[modelChoice]]
# Plot 4B - make by hand to deal with colour feedback
# Set up colours
colours = RColorBrewer:: brewer.pal(8, "Dark2")
RF_cols = c("darkgreen","darkgoldenrod","darkred")
phylum_cols = colours[1:5]
cluster_cols = colours[-c(1:5)]
days = c(-14, 0, 2, 5, 9, 14, 21)
# Flip Fac where needed
Fac = finalModel$Fac
Fac[[1]][,1] = -1 * Fac[[1]][,1]
Fac[[3]][,1] = -1 * Fac[[3]][,1]
Fac[[1]][,2] = -1 * Fac[[1]][,1]
Fac[[2]][,2] = -1 * Fac[[2]][,2]
a = cbind(Fac[[1]], processedPloeg$mode1) %>% as_tibble() %>% arrange(RFgroup, subject) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(RFgroup))) + geom_bar(stat="identity") + scale_fill_manual(name="Response group", values=RF_cols, labels=c("Low", "Mid", "High")) + xlab("") + ylab("Component 1") + theme(legend.position="none", text=element_text(size=12))
b = cbind(Fac[[2]], processedPloeg$mode2) %>% as_tibble() %>% arrange(Phylum, Class, Order, Family, Genus, Species, asv) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(Phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteriota", "Bacteroidota", "Firmicutes", "Fusobacteriota", "Proteobacteria")) + xlab("") + ylab("") + theme(legend.position="none", text=element_text(size=12))
c = cbind(Fac[[3]], days) %>% as_tibble() %>% ggplot(aes(x=days,y=V1)) + annotate("rect", xmin=0,xmax=14,ymin=-Inf,ymax=Inf, fill="red", alpha=0.5) + geom_line() + geom_point() + xlab("") + ylab("")
d = cbind(Fac[[1]], processedPloeg$mode1) %>% as_tibble() %>% arrange(RFgroup, subject) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(RFgroup))) + geom_bar(stat="identity") + scale_fill_manual(name="Response group", values=RF_cols, labels=c("Low", "Mid", "High")) + xlab("Subject index") + ylab("Component 2") + theme(legend.position="none", text=element_text(size=12))
e = cbind(Fac[[2]], processedPloeg$mode2) %>% as_tibble() %>% arrange(Phylum, Class, Order, Family, Genus, Species, asv) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(Phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteriota", "Bacteroidota", "Firmicutes", "Fusobacteriota", "Proteobacteria")) + xlab("Feature index") + ylab("") + theme(legend.position="none", text=element_text(size=12))
f = cbind(Fac[[3]], days) %>% as_tibble() %>% ggplot(aes(x=days,y=V2)) + annotate("rect", xmin=0,xmax=14,ymin=-Inf,ymax=Inf, fill="red", alpha=0.5) + geom_line() + geom_point() + xlab("Time point [days]") + ylab("")
ggarrange(a,b,c,d,e,f)
rf_data = read.csv("./Data/Ploeg_RFdata.csv")
colnames(rf_data) = c("subject", "id", "fotonr", "day", "group", "RFgroup", "MQH", "SPS(tm)", "Area_delta_R30", "Area_delta_Rmax", "Area_delta_R30_x_Rmax", "gingiva_mean_R_over_G", "gingiva_mean_R_over_G_upper_jaw", "gingiva_mean_R_over_G_lower_jaw")
rf_data = rf_data %>% as_tibble()
rf_data[rf_data$subject == "VSTPHZ", 1] = "VSTPH2"
rf_data[rf_data$subject == "D2VZH0", 1] = "DZVZH0"
rf_data[rf_data$subject == "DLODNN", 1] = "DLODDN"
rf_data[rf_data$subject == "O3VQFX", 1] = "O3VQFQ"
rf_data[rf_data$subject == "F80LGT", 1] = "F80LGF"
rf_data[rf_data$subject == "26QQR0", 1] = "26QQrO"
rf_data2 = read.csv("./Data/Ploeg_red_fluorescence_data.csv") %>% as_tibble()
rf_data2 = rf_data2[,c(2,4,181:192)]
rf_data = rf_data %>% left_join(rf_data2)
rf = rf_data %>% select(subject, RFgroup) %>% unique()
age_gender = read.csv("./Data/Ploeg_subjectMetadata.csv", sep=";")
age_gender = age_gender[2:nrow(age_gender),2:ncol(age_gender)]
age_gender = age_gender %>% as_tibble() %>% filter(onderzoeksgroep == 0) %>% select(naam, leeftijd, geslacht)
colnames(age_gender) = c("subject", "age", "gender")
# Correction for incorrect subject ids
age_gender[age_gender$subject == "VSTPHZ", 1] = "VSTPH2"
age_gender[age_gender$subject == "D2VZH0", 1] = "DZVZH0"
age_gender[age_gender$subject == "DLODNN", 1] = "DLODDN"
age_gender[age_gender$subject == "O3VQFX", 1] = "O3VQFQ"
age_gender[age_gender$subject == "F80LGT", 1] = "F80LGF"
age_gender[age_gender$subject == "26QQR0", 1] = "26QQrO"
age_gender = age_gender %>% arrange(subject)
normalSubjectLoadings = cbind(Fac[[1]], processedPloeg$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(processedPloeg$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
uncorrectedP = matrix(0L, nrow=2, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`1`, partB$`1`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`1`, temp$age, method="pearson")$p.value
uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=2, ncol=5)
correctedP
finalModel = parafac(processedPloeg$data, 2, nstart=100)
finalModel = parafac4microbiome::parafac(processedPloeg$data, 2, nstart=100)
normalSubjectLoadings = cbind(Fac[[1]], processedPloeg$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(Fac, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(processedPloeg$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
uncorrectedP = matrix(0L, nrow=2, ncol=5)
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
uncorrectedP[1,1] = cor.test(temp$V1, temp$plaquepercent, method="pearson")$p.value
uncorrectedP[2,1] = cor.test(temp$V2, temp$plaquepercent, method="pearson")$p.value
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
uncorrectedP[1,2] = cor.test(temp$V1, temp$bomppercent, method="pearson")$p.value
uncorrectedP[2,2] = cor.test(temp$V2, temp$bomppercent, method="pearson")$p.value
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
uncorrectedP[1,3] = cor.test(temp$V1, temp$Area_delta_R30, method="pearson")$p.value
uncorrectedP[2,3] = cor.test(temp$V2, temp$Area_delta_R30, method="pearson")$p.value
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
uncorrectedP[1,4] = t.test(partA$`1`, partB$`1`)$p.value # Not what I would do nowadays, but this is what is in the TIFN paper
uncorrectedP[2,4] = t.test(partA$`2`, partB$`2`)$p.value
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
uncorrectedP[1,5] = cor.test(temp$`1`, temp$age, method="pearson")$p.value
uncorrectedP[2,5] = cor.test(temp$`2`, temp$age, method="pearson")$p.value
correctedP = matrix(p.adjust(uncorrectedP, "BH"), nrow=2, ncol=5)
correctedP
numComponents = 2
modelChoice = which(qualityAssessment$metrics$varExp[,numComponents] == max(qualityAssessment$metrics$varExp[,numComponents]))
finalModel = qualityAssessment$models[[numComponents]][[modelChoice]]
# Plot 4B - make by hand to deal with colour feedback
# Set up colours
colours = RColorBrewer:: brewer.pal(8, "Dark2")
RF_cols = c("darkgreen","darkgoldenrod","darkred")
phylum_cols = colours[1:5]
cluster_cols = colours[-c(1:5)]
days = c(-14, 0, 2, 5, 9, 14, 21)
# Flip Fac where needed
Fac = finalModel$Fac
Fac[[1]][,1] = -1 * Fac[[1]][,1]
Fac[[3]][,1] = -1 * Fac[[3]][,1]
Fac[[1]][,2] = -1 * Fac[[1]][,1]
Fac[[2]][,2] = -1 * Fac[[2]][,2]
a = cbind(Fac[[1]], processedPloeg$mode1) %>% as_tibble() %>% arrange(RFgroup, subject) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(RFgroup))) + geom_bar(stat="identity") + scale_fill_manual(name="Response group", values=RF_cols, labels=c("Low", "Mid", "High")) + xlab("") + ylab("Component 1") + theme(legend.position="none", text=element_text(size=12))
b = cbind(Fac[[2]], processedPloeg$mode2) %>% as_tibble() %>% arrange(Phylum, Class, Order, Family, Genus, Species, asv) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(Phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteriota", "Bacteroidota", "Firmicutes", "Fusobacteriota", "Proteobacteria")) + xlab("") + ylab("") + theme(legend.position="none", text=element_text(size=12))
c = cbind(Fac[[3]], days) %>% as_tibble() %>% ggplot(aes(x=days,y=V1)) + annotate("rect", xmin=0,xmax=14,ymin=-Inf,ymax=Inf, fill="red", alpha=0.5) + geom_line() + geom_point() + xlab("") + ylab("")
d = cbind(Fac[[1]], processedPloeg$mode1) %>% as_tibble() %>% arrange(RFgroup, subject) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(RFgroup))) + geom_bar(stat="identity") + scale_fill_manual(name="Response group", values=RF_cols, labels=c("Low", "Mid", "High")) + xlab("Subject index") + ylab("Component 2") + theme(legend.position="none", text=element_text(size=12))
e = cbind(Fac[[2]], processedPloeg$mode2) %>% as_tibble() %>% arrange(Phylum, Class, Order, Family, Genus, Species, asv) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(Phylum))) + geom_bar(stat="identity") + scale_fill_manual(name="Phylum", values=phylum_cols, labels=c("Actinobacteriota", "Bacteroidota", "Firmicutes", "Fusobacteriota", "Proteobacteria")) + xlab("Feature index") + ylab("") + theme(legend.position="none", text=element_text(size=12))
f = cbind(Fac[[3]], days) %>% as_tibble() %>% ggplot(aes(x=days,y=V2)) + annotate("rect", xmin=0,xmax=14,ymin=-Inf,ymax=Inf, fill="red", alpha=0.5) + geom_line() + geom_point() + xlab("Time point [days]") + ylab("")
ggarrange(a,b,c,d,e,f)
