overallTitle = "")
plotPARAFACmodel(finalModel, processedPloeg, 2, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,
continuousModes = c(FALSE,FALSE,TRUE),
overallTitle = " ")
newPlotlist = list()
for(i in 1:6){
if(i==3 | i==6){
newPlotlist[[i]] = plotlist[[i]] + theme(text=element_text(size=14)) + scale_x_continuous(breaks=1:7,labels=c("-14","0","2","5","9","14","21"))
}else{
newPlotlist[[i]] = plotlist[[i]] + theme(text=element_text(size=14))
}
}
ggarrange(plotlist=newPlotlist, ncol=3, nrow=2)
rf_data = read.csv("./Data/Ploeg_RFdata.csv")
colnames(rf_data) = c("subject", "id", "fotonr", "day", "group", "RFgroup", "MQH", "SPS(tm)", "Area_delta_R30", "Area_delta_Rmax", "Area_delta_R30_x_Rmax", "gingiva_mean_R_over_G", "gingiva_mean_R_over_G_upper_jaw", "gingiva_mean_R_over_G_lower_jaw")
rf_data = rf_data %>% as_tibble()
rf_data[rf_data$subject == "VSTPHZ", 1] = "VSTPH2"
rf_data[rf_data$subject == "D2VZH0", 1] = "DZVZH0"
rf_data[rf_data$subject == "DLODNN", 1] = "DLODDN"
rf_data[rf_data$subject == "O3VQFX", 1] = "O3VQFQ"
rf_data[rf_data$subject == "F80LGT", 1] = "F80LGF"
rf_data[rf_data$subject == "26QQR0", 1] = "26QQrO"
rf_data2 = read.csv("./Data/Ploeg_red_fluorescence_data.csv") %>% as_tibble()
rf_data2 = rf_data2[,c(2,4,181:192)]
rf_data = rf_data %>% left_join(rf_data2)
rf = rf_data %>% select(subject, RFgroup) %>% unique()
age_gender = read.csv("./Data/Ploeg_subjectMetadata.csv", sep=";")
age_gender = age_gender[2:nrow(age_gender),2:ncol(age_gender)]
age_gender = age_gender %>% as_tibble() %>% filter(onderzoeksgroep == 0) %>% select(naam, leeftijd, geslacht)
colnames(age_gender) = c("subject", "age", "gender")
# Correction for incorrect subject ids
age_gender[age_gender$subject == "VSTPHZ", 1] = "VSTPH2"
age_gender[age_gender$subject == "D2VZH0", 1] = "DZVZH0"
age_gender[age_gender$subject == "DLODNN", 1] = "DLODDN"
age_gender[age_gender$subject == "O3VQFX", 1] = "O3VQFQ"
age_gender[age_gender$subject == "F80LGT", 1] = "F80LGF"
age_gender[age_gender$subject == "26QQR0", 1] = "26QQrO"
age_gender = age_gender %>% arrange(subject)
normalSubjectLoadings = cbind(finalModel$A, processedPloeg$mode1) %>% as_tibble()
transformedSubjectLoadings = transformPARAFACloadings(finalModel, 2, moreOutput=TRUE)$Ftilde %>% as_tibble() %>% mutate(subject = rep(processedPloeg$mode1$subject, each=7), day = rep(c(-14,0,2,5,9,14,21),41))
# Test against RFgroup (for completeness)
normalSubjectLoadings %>% select(1,2,RFgroup) %>% pivot_longer(-RFgroup) %>% ggplot(aes(x=as.factor(RFgroup),y=value)) + facet_wrap(vars(name)) + geom_boxplot() + stat_compare_means()
# Plaque%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, plaquepercent))
cor.test(temp$V1, temp$plaquepercent, method="pearson")
cor.test(temp$V2, temp$plaquepercent, method="pearson")
# Bleeding%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, bomppercent))
cor.test(temp$V1, temp$bomppercent, method="pearson")
cor.test(temp$V2, temp$bomppercent, method="pearson")
# RF%
temp=transformedSubjectLoadings %>% left_join(rf_data %>% select(subject, day, Area_delta_R30))
cor.test(temp$V1, temp$Area_delta_R30, method="pearson")
cor.test(temp$V2, temp$Area_delta_R30, method="pearson")
# Gender
partA = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==1)
partB = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,gender) %>% filter(gender==2)
t.test(partA$`1`, partB$`1`) # Not what I would do nowadays, but this is what is in the TIFN paper
t.test(partA$`2`, partB$`2`)
# Age
temp = normalSubjectLoadings %>% left_join(age_gender) %>% select(1,2,age)
cor.test(temp$`1`, temp$age, method="pearson")
cor.test(temp$`2`, temp$age, method="pearson")
uncorrectedP = c(0.092, 0.0044, 0.007492, 0.0154, 0.2681, 0.184, 1.317e-6, 0.01367, 0.4936, 0.5902, 0.7222, 0.769)
correctedP = p.adjust(uncorrectedP, "BH")
matrix(uncorrectedP, nrow=2)
matrix(correctedP, nrow=2)
# NOTE: does not filter based on the model yet
# Currently scrapped because it adds no value to the paper
# I = dim(vanderPloeg2024$data)[1]
# J = dim(vanderPloeg2024$data)[2]
# K = dim(vanderPloeg2024$data)[3]
#
# countMatrix = matrix(vanderPloeg2024$data, nrow=I)
# newColNames = paste0(rep(vanderPloeg2024$mode2$asv,K), "_t", rep(1:K, each=J))
# colnames(countMatrix) = newColNames
# countMatrix = countMatrix %>% as_tibble() %>% mutate(subject=vanderPloeg2024$mode1$subject) %>% pivot_longer(-subject) %>% mutate(timepoint=as.numeric(str_split_fixed(name,"_t",2)[,2]),id=str_split_fixed(name,"_t",2)[,1]) %>% select(-name) %>% pivot_wider(names_from=id,values_from=value) # shenanigans to create an I*K x J matrix
# countMatrix.numeric = countMatrix %>% select(-subject,-timepoint)
#
# totalSums = rowSums(countMatrix.numeric)
# relAbs = sweep(countMatrix.numeric, 1, totalSums, FUN="/") %>% as_tibble()
#
# # Plot 4A
# relAbs %>% mutate(subject=countMatrix$subject, timepoint=countMatrix$timepoint) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(vanderPloeg2024$mode1) %>% left_join(vanderPloeg2024$mode2, by=c("name"="asv")) %>% group_by(subject,timepoint,Phylum) %>% summarize(s=sum(value)) %>% left_join(vanderPloeg2024$mode1) %>% ungroup() %>% group_by(RFgroup,Phylum,timepoint) %>% summarize(m=mean(s,na.rm=TRUE)) %>% ungroup() %>% ggplot(aes(x=as.factor(timepoint),y=m,fill=as.factor(Phylum))) + facet_wrap(vars(RFgroup),nrow=3,strip.position="right") + geom_bar(stat="identity") + xlab("Time point [days]") + ylab("Relative abundance") + theme(legend.position="none")
conLoad = function(X, model, mode){
if(mode == 1){
Z = multiway::krprod(finalModel$C, finalModel$B)
numComponents = 2
congruences = matrix(0, nrow=I, ncol=numComponents)
for(f in 1:numComponents){
vectZ = c(Z[,f])
b = finalModel$B[,f]
c = finalModel$C[,f]
for(i in 1:I){
Xi = processedPloeg$data[i,,]
vectX = c(Xi)
congruences[i,f] = multiway::congru(vectZ, vectX)
}
}
}
else if(mode == 2){
Z = multiway::krprod(finalModel$C, finalModel$A)
numComponents = 2
congruences = matrix(0, nrow=J, ncol=numComponents)
for(f in 1:numComponents){
vectZ = c(Z[,f])
for(j in 1:J){
vectX = c(processedPloeg$data[,j,])
congruences[j,f] = multiway::congru(vectZ, vectX)
}
}
}
else if(mode == 3){
Z = multiway::krprod(finalModel$B, finalModel$A)
numComponents = 2
congruences = matrix(0, nrow=K, ncol=numComponents)
for(f in 1:numComponents){
vectZ = c(Z[,f])
for(k in 1:K){
vectX = c(processedPloeg$data[,,k])
congruences[k,f] = multiway::congru(vectZ, vectX)
}
}
}
return(congruences)
}
# Lazy solution to getting a long matrix
I = dim(processedPloeg$data)[1]
J = dim(processedPloeg$data)[2]
K = dim(processedPloeg$data)[3]
X_long = processedPloeg$data[,,1]
for(k in 2:K){
X_long = rbind(X_long, processedPloeg$data[,,k])
}
X_wide = matrix(processedPloeg$data, I, J*K)
Xhat = reinflateBlock(finalModel)
# Determine variance explained
featuresVarExp = 1:dim(Xhat)[2]
modelVarExp = varExp
for(i in 1:dim(Xhat)[2]){
featuresVarExp[i] = multiway::sumsq(Xhat[,i,], na.rm=TRUE) / multiway::sumsq(processedPloeg$data[,i,], na.rm=TRUE)
}
# Determine congruence
featureCongruences = conLoad(processedPloeg$data, finalModel, 2)
# Establish feature mask
varExpThreshold = modelVarExp
congruenceThreshold = 0.4
featureMask = (featuresVarExp >= varExpThreshold) | (rowSums(featureCongruences>=congruenceThreshold) >= 1)
Xhat_filtered = Xhat[,featureMask,]
I = dim(Xhat_filtered)[1]
J = dim(Xhat_filtered)[2]
K = dim(Xhat_filtered)[3]
# Lazy solution to getting a long matrix
Xhat_filtered_long = Xhat_filtered[,,1]
for(k in 2:K){
Xhat_filtered_long = rbind(Xhat_filtered_long, Xhat_filtered[,,k])
}
# Clustering diagnostics
a = fviz_nbclust(t(Xhat_filtered_long), pam, method="wss")
b = fviz_nbclust(t(Xhat_filtered_long), pam, method="silhouette")
c = fviz_nbclust(t(Xhat_filtered_long), pam, method="gap_stat")
ggarrange(a,b,c, nrow=3)
# Cluster
set.seed(1)
numClusters = 3
clusteringResult = pam(t(Xhat_filtered_long), numClusters, nstart=50)
result = processedPloeg$mode2[featureMask,] %>% as_tibble() %>% mutate(cluster=clusteringResult$clustering)
clusteredFeatures = cbind(transformPARAFACloadings(finalModel, 2), processedPloeg$mode2) %>% as_tibble() %>% left_join(result) %>% mutate(name = paste0(Genus, " ", Species))
clusteredFeatures[is.na(clusteredFeatures$cluster),"name"] = NA
clusteredFeatures[is.na(clusteredFeatures$Genus),"name"] = NA
clusteredFeatures[is.na(clusteredFeatures$Species),"name"] = NA
clusteredFeatures %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(cluster))) + geom_point() + xlab("Feature mode, component 1 (transformed)") + ylab("Feature mode, component 2 (transformed)") + scale_color_manual(name = "Cluster", labels=c("1","2","3","Not clustered"), values=c("#F8766D","#00BA38","#619CFF")) + theme(legend.position="bottom",text=element_text(size=14))
clusteredFeatures %>% ggplot(aes(x=`1`,y=`2`,col=as.factor(cluster), label=name)) + geom_point(size=3) + xlab("Feature mode, component 1 (transformed)") + ylab("Feature mode, component 2 (transformed)") + scale_color_manual(name = "Cluster", labels=c("1","2","3","Not clustered"), values=c("#F8766D","#00BA38","#619CFF")) + theme(legend.position="bottom",text=element_text(size=14)) + geom_text_repel()
microbiome.raw = read.csv("./Data/Ploeg_count-table.tsv", sep="\t")
taxa = read.csv("./Data/Ploeg_taxonomic-classification.tsv", sep="\t")
selectedIndividuals = microbiome.raw %>% as_tibble() %>% filter(group == "control") %>% select(subject) %>% pull %>% unique
countData = microbiome.raw %>% as_tibble() %>% filter(niche == "upper jaw, lingual", group == "control")
countData.numeric = countData %>% select(-sample,-subject,-visit,-group,-niche)
relAbs = sweep(countData.numeric, 1, rowSums(countData.numeric), FUN="/")
timepoints = c(-14,0,2,5,9,14,21)
clusterStr = c("Cluster 1", "Cluster 2", "Cluster 3")
relAbs %>% as_tibble() %>% mutate(subject=countData$subject,timepoint=timepoints[countData$visit]) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(rf) %>% left_join(clusteredFeatures, by=c("name"="asv")) %>% filter(cluster != "NA") %>% select(subject,timepoint,cluster,name,RFgroup,value) %>% group_by(subject,timepoint,cluster) %>% summarize(s=sum(value)) %>% left_join(rf) %>% ungroup() %>% filter(RFgroup != 1) %>% group_by(RFgroup,timepoint,cluster) %>% summarize(m=mean(s,na.rm=TRUE),v=plotrix::std.error(s,na.rm=TRUE)) %>% ungroup() %>% mutate(cluster_str = clusterStr[cluster]) %>% ggplot(aes(x=as.factor(timepoint),y=m,col=as.factor(RFgroup),group=as.factor(RFgroup))) + facet_grid(cols=vars(cluster_str)) + geom_line() + geom_errorbar(aes(ymax=m+v,ymin=m-v,width=.2)) + geom_point() + theme(legend.position="bottom",text=element_text(size=14)) + xlab("Time point [days]") + ylab("Sum of ASVs per group (mean +/- SEM)") + scale_color_manual(name="Response group",labels=c("Low responders", "High responders"),values=hue_pal()(2))
featureClustering = clusteredFeatures %>% mutate(group = cluster) %>% select(-cluster)
ASVgroupPermutationTest = function(nicheName, featureClustering, visitNumber, groupNumber, numPermutations){
microbiome.numeric = microbiome.raw %>% as_tibble() %>% filter(group=="control", niche==nicheName, visit==visitNumber)
microbiome.meta = microbiome.numeric %>% select(subject)
microbiome.numeric = microbiome.numeric %>% select(-sample,-subject,-visit,-group,-niche)
totalSums = rowSums(microbiome.numeric)
relativeAbundances = sweep(microbiome.numeric, 1, totalSums, FUN="/") %>% as_tibble() %>% mutate(subject = microbiome.meta$subject)
df = relativeAbundances %>%
select(all_of(c(featureClustering$asv, "subject"))) %>%
pivot_longer(-subject) %>%
left_join(featureClustering, by=c("name"="asv")) %>%
group_by(subject, group) %>%
summarize(s=sum(value), .groups="drop") %>%
ungroup() %>%
left_join(rf, by="subject") %>%
filter(group == groupNumber)
dfA = df %>% filter(RFgroup==0) %>% select(s) %>% pull()
dfB = df %>% filter(RFgroup==2) %>% select(s) %>% pull()
#realResult = wilcox.test(dfA, dfB)$p.value
realResult = mean(dfA) - mean(dfB)
# Permutations
set.seed(1)
permutedResults = 1:numPermutations
for(i in 1:numPermutations){
dfA = df %>% mutate(RFgroup = sample(RFgroup)) %>% filter(RFgroup==0) %>% select(s) %>% pull()
dfB = df %>% mutate(RFgroup = sample(RFgroup)) %>% filter(RFgroup==2) %>% select(s) %>% pull()
#permutedResults[i] = wilcox.test(dfA, dfB)$p.value
permutedResults[i] = mean(dfA) - mean(dfB)
}
Zscore = abs(realResult - mean(permutedResults)) / sd(permutedResults)
if (realResult < 0){
pvalue = sum(permutedResults < realResult) / numPermutations
}
else{
pvalue = sum(permutedResults > realResult) / numPermutations
}
return(list(realResult, permutedResults, mean(permutedResults), median(permutedResults), sd(permutedResults), Zscore, pvalue))
}
uncorrectedP = rep(NA, 7*3)
iterator = 1
for(visit in 1:7){
for(cluster in 1:3){
uncorrectedP[iterator] = ASVgroupPermutationTest("upper jaw, lingual", featureClustering, visit, cluster, 999)[[7]]
iterator = iterator + 1
}
}
correctedP = p.adjust(uncorrectedP, "BH")
matrix(uncorrectedP, nrow=3, ncol=7)
matrix(correctedP, nrow=3, ncol=7)
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(ggpubr)
library(paramGUI)
library(pracma)
library(plotly)
library(cowplot)
library(multiblock)
library(vegan)
library(ape)
library(ggrepel)
# source("../../N-way-shell-R/summary.functions.R")
# source("../../N-way-shell-R/PARAFAC_functions.R")
# source("../../N-way-shell-R/heatmap.2a.R")
# source("../../N-way-shell-R/plotfunctions.R")
# source("../Roel_sim_functions.R")
set.seed(0)
I = 100
J = 3
K = 10
partA = abs(rnorm(I/2, mean=0.02, sd=0.01))
partB = rnorm(I/2, mean=0.2, sd=0.01)
empty = rnorm(I/2, mean=0, sd=0.025)
#partB = seq(0.06, 0.12, length.out=I/2) + abs(rnorm(I/2, mean=0, sd=0.001))
#partC = seq(0.08, 0.12, length.out=I/2) + abs(rnorm(I/2, mean=0, sd=0.001))
# Component 1
t1 = c(partB, -partB)
# Component 2
t2 = c(seq(from=-0.2, to=-0.02, length.out=I/2), seq(from=0.02, to=0.2, length.out=I/2))
t1 %>% as_tibble() %>% mutate(index=1:nrow(.),phenotype=c(rep(1,I/2),rep(2,I/2))) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity")
t2 %>% as_tibble() %>% mutate(index=1:nrow(.),phenotype=c(rep(1,I/2),rep(2,I/2))) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity")
#p1 = createBinaryLoading(nonzeroIndices=10, length=J)
#p2 = createBinaryLoading(nonzeroIndices=20, length=J)
p1 = c(-0.05, 0.05, 0.8)
p1 = p1 / norm(as.matrix(p1),"2")
p2 = c(0.8, -0.05, 0.05)
p2 = p2 / norm(as.matrix(p2),"2")
p1 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=value)) + geom_bar(stat="identity")
p2 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=value)) + geom_bar(stat="identity")
k1 = (1:10)^3 #2^(1:10) #exp(1:10)
k1 = k1 / norm(as.matrix(k1), "2")
k2 = sigmoid(-5:5) / norm(sigmoid(-5:5),"2") + 0.5
k2 = k2[-6]
k1 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=value)) + geom_line()
k2 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=value)) + geom_line()
signalToNoiseRatio = 0.5
pattern1 = t1 %*% t(p1)
pattern2 = t2 %*% t(p2)
X = array(0L, dim=c(I, J, K))
for(k in 1:K){
X[,,k] = pattern1*k1[k] + pattern2*k2[k]
}
# Add error
# X = X / sqrt(sum(X^2)) # scales to ssq 1
#
# E = array(abs(rnorm(I*J*K)), dim=c(I,J,K))
# E = E / sqrt(sum(E^2)) * signalToNoiseRatio
# X = X + E
# Center across subject mode
X_cnt = X
for(i in 1:I){
for(k in 1:K){
X_cnt[i,,k] = X[i,,k] - mean(X[i,,k])
}
}
# Scale within feature mode
X_cnt_scl = X_cnt
for(i in 1:I){
X_cnt_scl[i,,] = X_cnt[i,,] / sd(X_cnt[i,,])
}
# Convert to flat array
flat = matrix(0L, nrow=I*K, ncol=J)
iterator = 1
for(i in 1:I){
for(k in 1:K){
flat[iterator,] = X[i,,k]
iterator = iterator + 1
}
}
flat %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% ggplot(aes(x=as.factor(timepoint),y=value,col=as.factor(subject),group=subject)) + facet_wrap(vars(name)) + geom_line()
design = cbind(1:I, c(rep(1,I/2), rep(2,I/2))) %>% as_tibble()
colnames(design) = c("subject", "phenotype")
fakeCounts = round(flat * 1000)
fakeCounts = fakeCounts + abs(min(fakeCounts)) # "pseudocount"
fakeCounts[1:500,1] = fakeCounts[1:500,1] # red in condition 1
fakeCounts[501:1000,1] = fakeCounts[501:1000,1] # red in condition 2
fakeCounts[1:500,2] = fakeCounts[1:500,2] # green in condition 1
fakeCounts[501:1000,2] = fakeCounts[501:1000,2] # green in condition 2
fakeCounts[1:500,3] = fakeCounts[1:500,3] # blue in condition 1
fakeCounts[501:1000,3] = fakeCounts[501:1000,3] -50# blue in condition 2
flat %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(design) %>% group_by(phenotype,timepoint,name) %>% summarise(m=mean(value),s=sd(value)) %>% ggplot(aes(x=as.factor(timepoint),y=m,col=as.factor(name))) + facet_wrap(vars(phenotype)) + geom_point() + geom_errorbar(aes(ymin=m-s,ymax=m+s))
fakeCounts %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(design) %>% group_by(phenotype,timepoint,name) %>% summarise(m=mean(value),s=sd(value)) %>% ggplot(aes(x=as.factor(timepoint),y=m,col=as.factor(name))) + facet_wrap(vars(phenotype)) + geom_point() + geom_errorbar(aes(ymin=m-s,ymax=m+s))
library(scales)
#show_col(hue_pal()(5))
relAbs = sweep(fakeCounts, 1, rowSums(fakeCounts), FUN="/")
relAbs %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% filter(subject %in% c(1,99)) %>% mutate(case_control = c(rep("Case", 30), rep("Control", 30))) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(name))) + facet_wrap(vars(case_control), nrow=I) + geom_bar(stat="identity", col="black") + scale_fill_manual(name="Phylum", labels=c("Actinobacteria", "Bacteroidetes", "Proteobacteria"), values=c("#A3A500", "#E76BF3", "#00BF7D")) + ylab("Relative abundance") + xlab("Time point") + theme(text=element_text(size=14))
relAbs %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% filter(subject %in% c(1,99)) %>% mutate(case_control = c(rep("Cases", 30), rep("Controls", 30))) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(name))) + facet_wrap(vars(case_control), nrow=I) + geom_bar(stat="identity", col="black") + scale_fill_manual(name="Phylum", labels=c("Actinobacteria", "Bacteroidetes", "Proteobacteria"), values=c("#A3A500", "#E76BF3", "#00BF7D")) + ylab("Relative abundance") + xlab("Time point") + theme(legend.position="none", text=element_text(size=14))
library(multiway)
library(scales)
# model = parafac(X, 2, nstart=100)
#
# # The model
# empty = ggplot() + theme_void()
# a=model$A %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
# b=model$A %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
# c=model$B %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
# d=model$B %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
# e=model$C %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
# f=model$C %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
# ggarrange(a,b,c,d,e,f)
# Real
g=t1 %>% as_tibble() %>% mutate(index=1:nrow(.),subject=1:nrow(.)) %>% left_join(design) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity") + theme(legend.position="none",text=element_text(size=14)) + ylab("Component 1 loading") + xlab("")
j=t2 %>% as_tibble() %>% mutate(index=1:nrow(.),subject=1:nrow(.)) %>% left_join(design) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity") + theme(legend.position="none",text=element_text(size=14)) + ylab("Component 2 loading") + xlab("Subject index")
h=p1 %>% as_tibble() %>% mutate(index=1:nrow(.),phylum=c("Actinobacteria", "Bacteroidetes", "Proteobacteria")) %>% ggplot(aes(x=index,y=value,fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("") + xlab("") + scale_fill_manual(name="Phylum", labels=c("Actinobacteria", "Bacteroidetes", "Proteobacteria"), values=c("#A3A500", "#E76BF3", "#00BF7D"))+ theme(legend.position="none",text=element_text(size=14))
k=p2 %>% as_tibble() %>% mutate(index=1:nrow(.),phylum=c("Actinobacteria", "Bacteroidetes", "Proteobacteria")) %>% ggplot(aes(x=index,y=value,fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("") + xlab("Feature index") + scale_fill_manual(name="Phylum", labels=c("Actinobacteria", "Bacteroidetes", "Proteobacteria"), values=c("#A3A500", "#E76BF3", "#00BF7D"))+ theme(legend.position="none",text=element_text(size=14))
i=k1 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=as.factor(index),y=value)) + geom_bar(stat="identity") + theme(legend.position="none",text=element_text(size=14))+ ylab("") + xlab("")
l=(k2-0.5) %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=as.factor(index),y=value)) + geom_bar(stat="identity") + theme(legend.position="none",text=element_text(size=14))+ ylab("") + xlab("Time point")
ggarrange(g,h,i,j,k,l)
t1 %>% as_tibble() %>% mutate(index=1:nrow(.),subject=1:nrow(.)) %>% left_join(design) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity") + theme(legend.position="right",text=element_text(size=14)) + ylab("Component 1") + xlab("") + scale_fill_manual(name="Subject group", values=hue_pal()(2), labels=c("Case", "Control"))
d = vegdist(fakeCounts, method="bray")
d2 = vegdist(fakeCounts+1, method="aitchison")
d = vegdist(fakeCounts, method="bray")
d2 = vegdist(fakeCounts+2, method="aitchison")
d = vegdist(fakeCounts, method="bray")
d2 = vegdist(fakeCounts+3, method="aitchison")
min(fakeCounts)
d = vegdist(fakeCounts, method="bray")
d2 = vegdist(fakeCounts+4, method="aitchison")
BC_pcoa = pcoa(d)
A_pcoa = pcoa(d2)
a=BC_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(phenotype))) + geom_point()
b=BC_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(timepoint))) + geom_point()
ggarrange(a,b)
c=A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(phenotype))) + geom_point() + scale_color_manual(name="Subject group", labels=c("Case", "Control"), values=c("#F8766D", "#00B0F6")) + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + theme(text=element_text(size=14))
c = c + theme(legend.position="none", text=element_text(size=14))
d=A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(timepoint))) + geom_point() + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + theme(legend.position="top")
d = d + theme(legend.position="none", text=element_text(size=14))
ggarrange(c,d, nrow=2)
A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1, y=Axis.2, shape=as.factor(phenotype), col=as.factor(timepoint))) + geom_point(size=3) + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + scale_color_discrete(name="Time point") + scale_shape_manual(name="Phenotype", labels=c("Case","Control"), values=16:17) + theme(text=element_text(size=14))
d = vegdist(fakeCounts+4, method="bray")
d2 = vegdist(fakeCounts+4, method="aitchison")
BC_pcoa = pcoa(d)
A_pcoa = pcoa(d2)
a=BC_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(phenotype))) + geom_point()
b=BC_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(timepoint))) + geom_point()
ggarrange(a,b)
c=A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(phenotype))) + geom_point() + scale_color_manual(name="Subject group", labels=c("Case", "Control"), values=c("#F8766D", "#00B0F6")) + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + theme(text=element_text(size=14))
c = c + theme(legend.position="none", text=element_text(size=14))
d=A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(timepoint))) + geom_point() + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + theme(legend.position="top")
d = d + theme(legend.position="none", text=element_text(size=14))
ggarrange(c,d, nrow=2)
A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1, y=Axis.2, shape=as.factor(phenotype), col=as.factor(timepoint))) + geom_point(size=3) + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + scale_color_discrete(name="Time point") + scale_shape_manual(name="Phenotype", labels=c("Case","Control"), values=16:17) + theme(text=element_text(size=14))
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(ggpubr)
library(paramGUI)
library(pracma)
library(plotly)
library(cowplot)
library(multiblock)
library(vegan)
library(ape)
library(ggrepel)
set.seed(0)
I = 100
J = 3
K = 10
partA = abs(rnorm(I/2, mean=0.02, sd=0.01))
partB = rnorm(I/2, mean=0.2, sd=0.01)
empty = rnorm(I/2, mean=0, sd=0.025)
#partB = seq(0.06, 0.12, length.out=I/2) + abs(rnorm(I/2, mean=0, sd=0.001))
#partC = seq(0.08, 0.12, length.out=I/2) + abs(rnorm(I/2, mean=0, sd=0.001))
# Component 1
t1 = c(partB, -partB)
# Component 2
t2 = c(seq(from=-0.2, to=-0.02, length.out=I/2), seq(from=0.02, to=0.2, length.out=I/2))
t1 %>% as_tibble() %>% mutate(index=1:nrow(.),phenotype=c(rep(1,I/2),rep(2,I/2))) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity")
t2 %>% as_tibble() %>% mutate(index=1:nrow(.),phenotype=c(rep(1,I/2),rep(2,I/2))) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity")
#p1 = createBinaryLoading(nonzeroIndices=10, length=J)
#p2 = createBinaryLoading(nonzeroIndices=20, length=J)
p1 = c(-0.05, 0.05, 0.8)
p1 = p1 / norm(as.matrix(p1),"2")
p2 = c(0.8, -0.05, 0.05)
p2 = p2 / norm(as.matrix(p2),"2")
p1 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=value)) + geom_bar(stat="identity")
p2 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=value)) + geom_bar(stat="identity")
k1 = (1:10)^3 #2^(1:10) #exp(1:10)
k1 = k1 / norm(as.matrix(k1), "2")
k2 = sigmoid(-5:5) / norm(sigmoid(-5:5),"2") + 0.5
k2 = k2[-6]
k1 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=value)) + geom_line()
k2 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=value)) + geom_line()
signalToNoiseRatio = 0.5
pattern1 = t1 %*% t(p1)
pattern2 = t2 %*% t(p2)
X = array(0L, dim=c(I, J, K))
for(k in 1:K){
X[,,k] = pattern1*k1[k] + pattern2*k2[k]
}
# Add error
# X = X / sqrt(sum(X^2)) # scales to ssq 1
#
# E = array(abs(rnorm(I*J*K)), dim=c(I,J,K))
# E = E / sqrt(sum(E^2)) * signalToNoiseRatio
# X = X + E
# Center across subject mode
X_cnt = X
for(i in 1:I){
for(k in 1:K){
X_cnt[i,,k] = X[i,,k] - mean(X[i,,k])
}
}
# Scale within feature mode
X_cnt_scl = X_cnt
for(i in 1:I){
X_cnt_scl[i,,] = X_cnt[i,,] / sd(X_cnt[i,,])
}
# Convert to flat array
flat = matrix(0L, nrow=I*K, ncol=J)
iterator = 1
for(i in 1:I){
for(k in 1:K){
flat[iterator,] = X[i,,k]
iterator = iterator + 1
}
}
flat %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% ggplot(aes(x=as.factor(timepoint),y=value,col=as.factor(subject),group=subject)) + facet_wrap(vars(name)) + geom_line()
design = cbind(1:I, c(rep(1,I/2), rep(2,I/2))) %>% as_tibble()
colnames(design) = c("subject", "phenotype")
fakeCounts = round(flat * 1000)
fakeCounts = fakeCounts + abs(min(fakeCounts)) # "pseudocount"
fakeCounts[1:500,1] = fakeCounts[1:500,1] # red in condition 1
fakeCounts[501:1000,1] = fakeCounts[501:1000,1] # red in condition 2
fakeCounts[1:500,2] = fakeCounts[1:500,2] # green in condition 1
fakeCounts[501:1000,2] = fakeCounts[501:1000,2] # green in condition 2
fakeCounts[1:500,3] = fakeCounts[1:500,3] # blue in condition 1
fakeCounts[501:1000,3] = fakeCounts[501:1000,3] -50# blue in condition 2
flat %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(design) %>% group_by(phenotype,timepoint,name) %>% summarise(m=mean(value),s=sd(value)) %>% ggplot(aes(x=as.factor(timepoint),y=m,col=as.factor(name))) + facet_wrap(vars(phenotype)) + geom_point() + geom_errorbar(aes(ymin=m-s,ymax=m+s))
fakeCounts %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% left_join(design) %>% group_by(phenotype,timepoint,name) %>% summarise(m=mean(value),s=sd(value)) %>% ggplot(aes(x=as.factor(timepoint),y=m,col=as.factor(name))) + facet_wrap(vars(phenotype)) + geom_point() + geom_errorbar(aes(ymin=m-s,ymax=m+s))
library(scales)
#show_col(hue_pal()(5))
relAbs = sweep(fakeCounts, 1, rowSums(fakeCounts), FUN="/")
relAbs %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% filter(subject %in% c(1,99)) %>% mutate(case_control = c(rep("Case", 30), rep("Control", 30))) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(name))) + facet_wrap(vars(case_control), nrow=I) + geom_bar(stat="identity", col="black") + scale_fill_manual(name="Phylum", labels=c("Actinobacteria", "Bacteroidetes", "Proteobacteria"), values=c("#A3A500", "#E76BF3", "#00BF7D")) + ylab("Relative abundance") + xlab("Time point") + theme(text=element_text(size=14))
relAbs %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% pivot_longer(-c(subject,timepoint)) %>% filter(subject %in% c(1,99)) %>% mutate(case_control = c(rep("Cases", 30), rep("Controls", 30))) %>% ggplot(aes(x=as.factor(timepoint),y=value,fill=as.factor(name))) + facet_wrap(vars(case_control), nrow=I) + geom_bar(stat="identity", col="black") + scale_fill_manual(name="Phylum", labels=c("Actinobacteria", "Bacteroidetes", "Proteobacteria"), values=c("#A3A500", "#E76BF3", "#00BF7D")) + ylab("Relative abundance") + xlab("Time point") + theme(legend.position="none", text=element_text(size=14))
library(multiway)
library(scales)
# model = parafac(X, 2, nstart=100)
#
# # The model
# empty = ggplot() + theme_void()
# a=model$A %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
# b=model$A %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
# c=model$B %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
# d=model$B %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
# e=model$C %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
# f=model$C %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
# ggarrange(a,b,c,d,e,f)
# Real
g=t1 %>% as_tibble() %>% mutate(index=1:nrow(.),subject=1:nrow(.)) %>% left_join(design) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity") + theme(legend.position="none",text=element_text(size=14)) + ylab("Component 1 loading") + xlab("")
j=t2 %>% as_tibble() %>% mutate(index=1:nrow(.),subject=1:nrow(.)) %>% left_join(design) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity") + theme(legend.position="none",text=element_text(size=14)) + ylab("Component 2 loading") + xlab("Subject index")
h=p1 %>% as_tibble() %>% mutate(index=1:nrow(.),phylum=c("Actinobacteria", "Bacteroidetes", "Proteobacteria")) %>% ggplot(aes(x=index,y=value,fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("") + xlab("") + scale_fill_manual(name="Phylum", labels=c("Actinobacteria", "Bacteroidetes", "Proteobacteria"), values=c("#A3A500", "#E76BF3", "#00BF7D"))+ theme(legend.position="none",text=element_text(size=14))
k=p2 %>% as_tibble() %>% mutate(index=1:nrow(.),phylum=c("Actinobacteria", "Bacteroidetes", "Proteobacteria")) %>% ggplot(aes(x=index,y=value,fill=as.factor(phylum))) + geom_bar(stat="identity") + ylab("") + xlab("Feature index") + scale_fill_manual(name="Phylum", labels=c("Actinobacteria", "Bacteroidetes", "Proteobacteria"), values=c("#A3A500", "#E76BF3", "#00BF7D"))+ theme(legend.position="none",text=element_text(size=14))
i=k1 %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=as.factor(index),y=value)) + geom_bar(stat="identity") + theme(legend.position="none",text=element_text(size=14))+ ylab("") + xlab("")
l=(k2-0.5) %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=as.factor(index),y=value)) + geom_bar(stat="identity") + theme(legend.position="none",text=element_text(size=14))+ ylab("") + xlab("Time point")
ggarrange(g,h,i,j,k,l)
t1 %>% as_tibble() %>% mutate(index=1:nrow(.),subject=1:nrow(.)) %>% left_join(design) %>% ggplot(aes(x=index,y=value,fill=as.factor(phenotype))) + geom_bar(stat="identity") + theme(legend.position="right",text=element_text(size=14)) + ylab("Component 1") + xlab("") + scale_fill_manual(name="Subject group", values=hue_pal()(2), labels=c("Case", "Control"))
d = vegdist(fakeCounts+4, method="bray")
d2 = vegdist(fakeCounts+4, method="aitchison")
BC_pcoa = pcoa(d)
A_pcoa = pcoa(d2)
a=BC_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(phenotype))) + geom_point()
b=BC_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(timepoint))) + geom_point()
ggarrange(a,b)
c=A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(phenotype))) + geom_point() + scale_color_manual(name="Subject group", labels=c("Case", "Control"), values=c("#F8766D", "#00B0F6")) + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + theme(text=element_text(size=14))
c = c + theme(legend.position="none", text=element_text(size=14))
d=A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% ggplot(aes(x=Axis.1,y=Axis.2,col=as.factor(timepoint))) + geom_point() + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + theme(legend.position="top")
d = d + theme(legend.position="none", text=element_text(size=14))
ggarrange(c,d, nrow=2)
A_pcoa$vectors %>% as_tibble() %>% mutate(subject=rep(1:I,each=K),timepoint=rep(1:K,I)) %>% select(subject,timepoint,Axis.1,Axis.2) %>% left_join(design) %>% ggplot(aes(x=Axis.1, y=Axis.2, shape=as.factor(phenotype), col=as.factor(timepoint))) + geom_point(size=3) + xlab("PCoA Component 1 (95%)") + ylab("PCoA Component 2 (5%)") + scale_color_discrete(name="Time point") + scale_shape_manual(name="Phenotype", labels=c("Case","Control"), values=16:17) + theme(text=element_text(size=14))
